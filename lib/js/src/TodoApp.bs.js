// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List        = require("bs-platform/lib/js/list.js");
var $$Array     = require("bs-platform/lib/js/array.js");
var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var React       = require("react");
var Js_boolean  = require("bs-platform/lib/js/js_boolean.js");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");

function str(prim) {
  return prim;
}

var component = ReasonReact.statelessComponent("TodoItem");

function make(item, onToggle, _) {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function () {
      return React.createElement("div", {
                  className: "item"
                }, React.createElement("input", {
                      checked: Js_boolean.to_js_boolean(item[/* completed */2]),
                      type: "checkbox",
                      onClick: (function () {
                          return Curry._1(onToggle, /* () */0);
                        })
                    }), item[/* title */1]);
    });
  return newrecord;
}

var TodoItem = /* module */[
  /* component */component,
  /* make */make
];

var component$1 = ReasonReact.reducerComponent("TodoApp");

var lastId = [0];

function newItem() {
  lastId[0] = lastId[0] + 1 | 0;
  return /* record */[
          /* id */lastId[0],
          /* title */"Click a button",
          /* completed : false */0
        ];
}

function toggleItem(id, item) {
  if (item[/* id */0] === id) {
    return /* record */[
            /* id */item[/* id */0],
            /* title */item[/* title */1],
            /* completed */1 - item[/* completed */2]
          ];
  } else {
    return item;
  }
}

function toggleOneItem(id, items) {
  return List.map((function (param) {
                return toggleItem(id, param);
              }), items);
}

function make$1() {
  var newrecord = component$1.slice();
  newrecord[/* render */9] = (function (param) {
      var items = param[/* state */2][/* items */0];
      var reduce = param[/* reduce */1];
      var numItems = List.length(items);
      return React.createElement("div", {
                  className: "app"
                }, React.createElement("div", {
                      className: "title"
                    }, "What to do", React.createElement("button", {
                          onClick: Curry._1(reduce, (function () {
                                  return /* AddItem */0;
                                }))
                        }, "Add something")), React.createElement("div", {
                      className: "items"
                    }, $$Array.of_list(List.map((function (item) {
                                return ReasonReact.element(/* Some */[Pervasives.string_of_int(item[/* id */0])], /* None */0, make(item, Curry._1(reduce, (function () {
                                                      return /* ToggleItem */[item[/* id */0]];
                                                    })), /* array */[]));
                              }), items))), React.createElement("div", {
                      className: "footer"
                    }, Pervasives.string_of_int(numItems) + " items"));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[/* items : [] */0];
    });
  newrecord[/* reducer */12] = (function (action, param) {
      var items = param[/* items */0];
      if (action) {
        var id = action[0];
        return /* Update */Block.__(0, [/* record */[/* items */List.map((function (param) {
                            return toggleItem(id, param);
                          }), items)]]);
      } else {
        return /* Update */Block.__(0, [/* record */[/* items : :: */[
                      newItem(/* () */0),
                      items
                    ]]]);
      }
    });
  return newrecord;
}

exports.str           = str;
exports.TodoItem      = TodoItem;
exports.component     = component$1;
exports.lastId        = lastId;
exports.newItem       = newItem;
exports.toggleItem    = toggleItem;
exports.toggleOneItem = toggleOneItem;
exports.make          = make$1;
/* component Not a pure module */
